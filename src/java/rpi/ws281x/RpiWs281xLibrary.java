package rpi.ws281x;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
/**
 * JNA Wrapper for library <b>rpi.ws281x</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface RpiWs281xLibrary extends Library {
    String JNA_LIBRARY_PATH = "/usr/local/bin/libws2811.a";
    NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(RpiWs281xLibrary.JNA_LIBRARY_PATH);
    RpiWs281xLibrary INSTANCE = (RpiWs281xLibrary)Native.loadLibrary(RpiWs281xLibrary.JNA_LIBRARY_PATH, RpiWs281xLibrary.class);
    /** enum values */
    interface ws2811_return_t {
        /** <i>native declaration : line 113</i> */
        int WS2811_SUCCESS = 0;
        /** <i>native declaration : line 113</i> */
        int WS2811_ERROR_GENERIC = -1;
        /** <i>native declaration : line 113</i> */
        int WS2811_ERROR_OUT_OF_MEMORY = -2;
        /** <i>native declaration : line 113</i> */
        int WS2811_ERROR_HW_NOT_SUPPORTED = -3;
        /** <i>native declaration : line 113</i> */
        int WS2811_ERROR_MEM_LOCK = -4;
        /** <i>native declaration : line 113</i> */
        int WS2811_ERROR_MMAP = -5;
        /** <i>native declaration : line 113</i> */
        int WS2811_ERROR_MAP_REGISTERS = -6;
        /** <i>native declaration : line 113</i> */
        int WS2811_ERROR_GPIO_INIT = -7;
        /** <i>native declaration : line 113</i> */
        int WS2811_ERROR_PWM_SETUP = -8;
        /** <i>native declaration : line 113</i> */
        int WS2811_ERROR_MAILBOX_DEVICE = -9;
        /** <i>native declaration : line 113</i> */
        int WS2811_ERROR_DMA = -10;
        /** <i>native declaration : line 113</i> */
        int WS2811_ERROR_ILLEGAL_GPIO = -11;
        /** <i>native declaration : line 113</i> */
        int WS2811_ERROR_PCM_SETUP = -12;
        /** <i>native declaration : line 113</i> */
        int WS2811_ERROR_SPI_SETUP = -13;
        /** <i>native declaration : line 113</i> */
        int WS2811_ERROR_SPI_TRANSFER = -14;
        /** <i>native declaration : line 115</i> */
        int WS2811_RETURN_STATE_COUNT = -13;
    };
    int SK6812_STRIP_GRBW = (int)0x18081000;
    int WS2812_STRIP = (int)0x00081000;
    int SK6812_STRIP = (int)0x00081000;
    int SK6812_STRIP_BRGW = (int)0x18001008;
    int SK6812_STRIP_RGBW = (int)0x18100800;
    int WS2811_STRIP_RGB = (int)0x00100800;
    int WS2811_STRIP_BGR = (int)0x00000810;
    int SK6812W_STRIP = (int)0x18081000;
    int WS2811_TARGET_FREQ = (int)800000;
    int SK6812_STRIP_BGRW = (int)0x18000810;
    int WS2811_STRIP_GRB = (int)0x00081000;
    int WS2811_STRIP_BRG = (int)0x00001008;
    int SK6812_STRIP_GBRW = (int)0x18080010;
    int SK6812_SHIFT_WMASK = (int)0xf0000000;
    int SK6812_STRIP_RBGW = (int)0x18100008;
    int WS2811_STRIP_RBG = (int)0x00100008;
    int WS2811_STRIP_GBR = (int)0x00080010;
    /**
     * < Initialize buffers/hardware<br>
     * Original signature : <code>ws2811_return_t ws2811_init(ws2811_t*)</code><br>
     * <i>native declaration : line 118</i>
     */
    int ws2811_init(ws2811_t ws2811);
    /**
     * < Tear it all down<br>
     * Original signature : <code>void ws2811_fini(ws2811_t*)</code><br>
     * <i>native declaration : line 119</i>
     */
    void ws2811_fini(ws2811_t ws2811);
    /**
     * < Send LEDs off to hardware<br>
     * Original signature : <code>ws2811_return_t ws2811_render(ws2811_t*)</code><br>
     * <i>native declaration : line 120</i>
     */
    int ws2811_render(ws2811_t ws2811);
    /**
     * < Wait for DMA completion<br>
     * Original signature : <code>ws2811_return_t ws2811_wait(ws2811_t*)</code><br>
     * <i>native declaration : line 121</i>
     */
    int ws2811_wait(ws2811_t ws2811);
    /**
     * < Get string representation of the given return state<br>
     * Original signature : <code>char* ws2811_get_return_t_str(const ws2811_return_t)</code><br>
     * <i>native declaration : line 122</i>
     */
    Pointer ws2811_get_return_t_str(int state);
    class rpi_hw_t extends PointerType {
        public rpi_hw_t(Pointer address) {
            super(address);
        }
        public rpi_hw_t() {
            super();
        }
    };
    class ws2811_device extends PointerType {
        public ws2811_device(Pointer address) {
            super(address);
        }
        public ws2811_device() {
            super();
        }
    };
}
